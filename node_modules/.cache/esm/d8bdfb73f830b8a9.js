let gql,GraphQLScalarType;_f83‍.x([["typeDef",()=>typeDef],["resolvers",()=>resolvers]]);_f83‍.w("graphql-tag",[["default",["gql"],function(v){gql=v}]]);_f83‍.w("graphql",[["GraphQLScalarType",["GraphQLScalarType"],function(v){GraphQLScalarType=v}]]);


       const typeDef = gql`
  scalar Date
  extend type Query {
    campaigns(from: Date!, to: Date!): [Campaign]
  }
  type Campaign {
    name: String
    type: AdType
    targeting: Targeting
    budget: Float
    impressions: Int
    clicks: Int
    ctr: Float
    spend: Float
    cpc: Float
    orders: Int
    sales: Float
    aocs: Float
    portfolio: String
  }
  enum Targeting {
    Automatic
    Manual
  }
  enum AdType {
    SP
    SB
  }
`;

       const resolvers = {
  Query: {
    campaigns(_, { from, to }) {
      return {}
    },
  },
  Campaign: { 
    name: 'test campaign',
    type: 'SP',
    targeting: 'Manual',
    budget: 15,
    impressions: 14124,
    clicks: 224,
    ctr: 0.02,
    spend: 1241,
    cpc: 0.67,
    orders: 155,
    sales: 1051,
    aocs: 0.21,
    portfolio: 'Demo Portfolio'
  },
  Date: new GraphQLScalarType({
    name: 'Date',
    description: 'Date custom scalar type',
    parseValue(value) {
      return new Date(value); // value from the client
    },
    serialize(value) {
      return value.getTime(); // value sent to the client
    },
    parseLiteral(ast) {
      if (ast.kind === Kind.INT) {
        return new Date(ast.value) // ast value is always in string format
      }
      return null;
    },
  }),
};



