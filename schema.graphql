
  type Query {
    _empty: String
  }
  type Mutation {
    _empty: String
  }
 type AuthToken {
  token: String!
}

extend type Mutation {
  createSession(authCode: String!): AuthToken!
} scalar Date
 type Performance {
  date: Date
  impressions: Int
  clicks: Int
  ctr: Float
  spend: Int
  cpc: Float
  orders: Int
  revenue: Int
  acos: Float
  absoluteRevenue: Int
  absoluteAcos: Float
}

type PerformancePercent {
  impressions: Float
  clicks: Float
  ctr: Float
  spend: Float
  orders: Float
  revenue: Float
  acos: Float
  absoluteAcos: Float
} extend type Query {
  Campaign(id: ID!): Campaign
}


type Campaign {
  id: ID!
  name: String!
  adType: AdType!
  targeting: Targeting!
  budget: Float!
  portfolio: String
  # Reduce all samples in requested time into one sample
  CampaignPerformanceReduced(from: Date, to: Date): Performance 
  # Percent change of data compared to previous period
  CampaignPerformanceDelta(from: Date, to: Date): PerformancePercent
}

enum AdType {
  SP
  SB
}

enum Targeting {
  Automatic
  Manual
}
 # import Campaign from "../campaign/campaignSchema.graphql"
# import Date from "../customScalar/dateSchema.graphql"

type SellerProfile {
  id: ID!
  name: String!
  countryCode: CountryCode!
  # include all campaigns that have to report any data in that time window
  Campaigns(from: Date, to: Date): [Campaign]!
  # Reduce all samples in requested time into one sample
  ProfilePerformanceReduced(from: Date, to: Date): Performance!
  # Return all samples in requested time
  ProfilePerformance(from: Date, to: Date): [Performance]!
}

extend type Query {
  SellerProfiles: [SellerProfile!]!
  # return activeSellerProfile if no id specified
  SellerProfile(id: ID!): SellerProfile!
  ActiveSellerProfile: SellerProfile!
}

extend type Mutation {
  SetActiveSellerProfile(id: ID!): SellerProfile!
}

enum CountryCode {
  US
  MX
  CA
  DE
  UK
  IT
}
 type UserFilterDates {
  id: ID!
  from: Date!
  to: Date!
}

extend type Query {
  UserFilterDates: UserFilterDates
}

input UserFilterDatesInput {
  from: Date!
  to: Date!
}

extend type Mutation {
  SetUserFilterDates(input: UserFilterDatesInput!): UserFilterDates!
}